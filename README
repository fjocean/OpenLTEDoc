This repository is a clone of the openLTE project at sourceforge.net/projects/openlte/.
I am planning to add additional documentation & test code for the purpose of
furthering my understanding of the code.

Original README Below...

This directory contains the openLTE source code.  For support, please
subscribe to openlte-discuss@lists.sourceforge.net.  Details can be
found at sourceforge.net/projects/openlte/.

The directory structure for the project is:
octave                Octave test code
cmn_hdr               Common header files
liblte                C++ library of commonly used LTE functions
cmake                 Files needed for cmake
build                 Cmake generated build files
LTE_fdd_dl_file_scan  A gnu-radio LTE FDD DL file scanner application
LTE_fdd_dl_file_gen   A gnu-radio LTE FDD DL file generator application
LTE_fdd_dl_scan       A gnu-radio LTE FDD DL scanner application that
                      currently supports rtl-sdr hardware

To build the C++ and python code use the following:

  $ cd build
  $ cmake ../
  $ make

To install the C++ and python code use the following:

  $ cd build
  $ cmake ../
  $ make
  $ sudo make install

##################
#  FILE SCANNER  #
##################
To use the installed C++ and python code for the file scanner,
set the PYTHONPATH env variable to
<python_install_dir>/dist-packages/gnuradio/
for instance /usr/local/lib/python2.7/dist-packages/gnuradio/
and make sure that /usr/local/lib is added to /etc/ld.so.conf
and that LD_LIBRARY_PATH is set to /usr/local/lib (export
LD_LIBRARY_PATH=/usr/local/lib).  Then run LTE_fdd_dl_file_scan.py
and specify a recorded LTE file as the input. For example:

  $ LTE_fdd_dl_file_scan.py lte_file.bin

The recorded LTE file currently must be interleaved 8-bit I and
Q samples recorded at 30.72MHz.

####################
#  FILE GENERATOR  #
####################
To use the installed C++ and python code for the file generator,
set the PYTHONPATH env variable to
<python_install_dir>/dist-packages/gnuradio/
for instance /usr/local/lib/python2.7/dist-packages/gnuradio/
and that LD_LIBRARY_PATH is set to /usr/local/lib (export
LD_LIBRARY_PATH=/usr/local/lib).  Then run LTE_fdd_dl_file_gen.py
and specify an output file for the LTE fdd downlink signal.
For example:

  $ LTE_fdd_dl_file_gen.py lte_file.bin

The generated LTE file contains interleaved 8-bit I and Q samples
at a sample rate of 30.72MHz.  The output file can be used as the
input for the LTE_fdd_dl_file_scan application.

#############
#  SCANNER  #
#############
To use the installed C++ live scanner, make sure LD_LIBRARY_PATH
is set to /usr/local/lib (export LD_LIBRARY_PATH=/usr/local/lib),
plug in rtl-sdr hardware, run LTE_fdd_dl_scan, and connect (via
telnet, nc, etc) to the control port at port number 20000.  Scan
parameters can be changed and scan results can be observed on the
control port.  For a list of parameters simply type help on the
control port.

############
#  OCTAVE  #
############
To use the octave code, run the top level octave .m files:
lte_fdd_dl_transmit.m and lte_fdd_dl_receive.m.  If multiple
transmit antennas are used, the outputs need to be combined
before input to the receiver.
